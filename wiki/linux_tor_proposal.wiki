Code that should be added to line 29 in TorLoader.java
{{{
                ProcessBuilder pb=null;
                String os = System.getProperty("os.name").toLowerCase(); // Operating System details as a CASE INSENSTIVE string
            	Logger.log(Logger.NOTICE, "TorLoader ", "Checking OS: "+os);
				/*
				 *  check if windows and config via processbuilder
				 */
				if (os.indexOf("win") >= 0) {
	            	Logger.log(Logger.NOTICE, "TorLoader", "Start portable tor in windows");
			        // if so, then start tor.exe with torrc.txt
			        pb = new ProcessBuilder(new String[] {
			                        "Tor/tor.exe", "-f", "torrc.txt"
			        });
				/*
				 *  check if linux or unix and config via processbuilder
				 */
				} else if(os.indexOf("nix") >= 0 || os.indexOf("nux") >= 0) {
	            	Logger.log(Logger.NOTICE, "TorLoader", "Start portable tor in *nix or linux");
			        // Make tor.sh executable - Should I do this? or is there a more direct way to chmod?
			        Process changePermissions;
                    try {
                        changePermissions = Runtime.getRuntime().exec("chmod 0700 Tor/tor.sh");
                        changePermissions.waitFor();                    
		            } catch (IOException e1) {
		            	Logger.log(Logger.NOTICE, "TorLoader", "Error: chmod permission fail: "+e1.getLocalizedMessage());
                    } catch (InterruptedException e) {
                    }
			        // execute tor.sh now
			        pb = new ProcessBuilder(new String[] {
			                        "Tor/tor.sh"
			        });
				} 
				/*
				 *      execute portable tor
				 */
}}}

to replace

{{{
					ProcessBuilder pb = new ProcessBuilder(new String[] {
							"Tor/tor.exe", "-f", "torrc.txt"
					});
				pb.directory(new File("Tor/").getAbsoluteFile());
				System.out.println(new File("Tor/").getAbsolutePath());
}}}

-------
In TorLoader.java

REMOVE:
{{{
		if (System.getProperty("os.name").toLowerCase().indexOf("win") == -1) {
			Logger.log(Logger.NOTICE, "TorLoader", "Error: Not windows.");
			return;
		}
		if (!new File("Tor/tor.exe").exists()) {
			Logger.log(Logger.NOTICE, "TorLoader", "Error: Tor/tor.exe not found.");
			return;
		}
}}}

--------

The other modification to the source to enable portable Linux in config.java is

{{{
			/*
			 * Previously the logic was that... if using windows, use portable tor, if not then ask for settings input
			 * However we now have support for linux.
			 * Now, instead we want to know. Shall we load 'portable tor'? (maybe change LoadTor to LoadPortableTor)
			 * the loadTor is always defined by settings.ini first. If not then we shall assume its first start, and that they want to go portable.
			 * (note: only if the portable tor executables exist)
			 */
            String os = System.getProperty("os.name").toLowerCase(); // Operating System details as a CASE INSENSTIVE string
            // Check if missing windows or linux portable files. If so, then disable portable tor loading.
            if (	((os.indexOf("win") >= 0) && !new File("Tor/tor.exe").exists()) // Windows check
            	 ||	((os.indexOf("nix") >= 0 || os.indexOf("nux") >= 0) && !new File("Tor/tor.sh").exists()) ){ // Linux or Unix checks
                Logger.log(Logger.NOTICE, "Config", "Error: Tor/tor.exe (win*) or Tor/tor.sh (*nix or *nux) not found. - Recommend configering your own tor hidden services");
    			loadTor = false;
            } else {
            	loadTor = Boolean.parseBoolean(assign("loadTor", "true", prop));
            }
            if (loadTor) {
							SOCKS_PORT = assignInt("SOCKS_PORT", 11157, prop);
							LOCAL_PORT = assignInt("LOCAL_PORT", 8975, prop);
			} else { // this will trigger a prompt for user to enter sock numbers
							SOCKS_PORT = assignInt("SOCKS_PORT", -1, prop);
							LOCAL_PORT = assignInt("LOCAL_PORT", -1, prop);
			}
}}}

REPLACING

{{{
			if (System.getProperty("os.name").toLowerCase().indexOf("win") >= 0) {
				SOCKS_PORT = assignInt("SOCKS_PORT", 11157, prop);
				LOCAL_PORT = assignInt("LOCAL_PORT", 8975, prop);
				loadTor = Boolean.parseBoolean(assign("loadTor", "true", prop));
			} else {
				SOCKS_PORT = assignInt("SOCKS_PORT", -1, prop);
				LOCAL_PORT = assignInt("LOCAL_PORT", -1, prop);
				loadTor = false;
			}
}}}

------


The tor.sh has
{{{
#!/bin/sh

trap 'kill -15 `cat tor.pid`' 15 #when this script closes, kill tor hidden service

export PATH=$PATH:/usr/sbin # set some path var - not sure what it does
tor -f torrc.txt --PidFile tor.pid & # start linux tor with torrc.txt
wait # wait forever
}}}